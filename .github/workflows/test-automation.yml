name: PyTestSuite Pro Automated Tests

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly regression tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  TEST_ENV: 'ci'

jobs:
  # Smoke Tests - Quick validation
  smoke-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run smoke tests
      run: |
        pytest -m smoke --html=reports/smoke-report.html --self-contained-html -v
      env:
        TEST_ENV: ci
        SELENIUM_REMOTE_URL: ${{ secrets.SELENIUM_GRID_URL }}
    
    - name: Upload smoke test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: smoke-test-results
        path: reports/

  # Unit and API Tests
  api-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      # Mock API service for testing
      test-api:
        image: mockserver/mockserver:latest
        ports:
          - 1080:1080
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run API tests
      run: |
        pytest tests/api/ -m "api and not slow" --html=reports/api-report.html --self-contained-html -v
      env:
        TEST_ENV: ci
        API_BASE_URL: http://localhost:1080
    
    - name: Upload API test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-test-results
        path: reports/

  # UI Tests with different browsers
  ui-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up Chrome
      if: matrix.browser == 'chrome'
      uses: browser-actions/setup-chrome@latest
    
    - name: Set up Firefox
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-firefox@latest
    
    - name: Set up Edge
      if: matrix.browser == 'edge'
      uses: browser-actions/setup-edge@latest
    
    - name: Run UI tests
      run: |
        pytest tests/ui/ -m "ui and not slow" --browser=${{ matrix.browser }} --html=reports/ui-${{ matrix.browser }}-report.html --self-contained-html -v
      env:
        TEST_ENV: ci
        BROWSER: ${{ matrix.browser }}
        HEADLESS: true
    
    - name: Upload UI test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ui-test-results-${{ matrix.browser }}
        path: reports/

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [smoke-tests, api-tests]
    
    services:
      test-database:
        image: postgres:13
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -m "integration" --html=reports/integration-report.html --self-contained-html -v
      env:
        TEST_ENV: ci
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        HEADLESS: true
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: reports/

  # Parallel Execution Tests
  parallel-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run parallel tests
      run: |
        pytest tests/ -m "regression and not slow" -n auto --html=reports/parallel-report.html --self-contained-html -v
      env:
        TEST_ENV: ci
        HEADLESS: true
    
    - name: Upload parallel test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: parallel-test-results
        path: reports/

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'performance')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance tests
      run: |
        pytest tests/ -m "performance" --html=reports/performance-report.html --self-contained-html -v
      env:
        TEST_ENV: ci
        HEADLESS: true
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: reports/

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'security')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run security tests
      run: |
        pytest tests/ -m "security" --html=reports/security-report.html --self-contained-html -v
      env:
        TEST_ENV: ci
        HEADLESS: true
    
    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: reports/

  # Nightly Regression Tests
  nightly-regression:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run full regression suite
      run: |
        pytest tests/ -m "regression" --html=reports/regression-report.html --self-contained-html -v
      env:
        TEST_ENV: ci
        HEADLESS: true
    
    - name: Upload regression test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: regression-test-results
        path: reports/
    
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Nightly Regression Tests Failed',
            body: 'The nightly regression test suite has failed. Please investigate.',
            labels: ['bug', 'regression', 'urgent']
          })

  # Test Results Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [smoke-tests, api-tests, ui-tests, integration-tests, parallel-tests]
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v3
    
    - name: Create test summary
      run: |
        echo "# Test Execution Summary" > test-summary.md
        echo "## Test Results" >> test-summary.md
        echo "- Smoke Tests: ${{ needs.smoke-tests.result }}" >> test-summary.md
        echo "- API Tests: ${{ needs.api-tests.result }}" >> test-summary.md
        echo "- UI Tests: ${{ needs.ui-tests.result }}" >> test-summary.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
        echo "- Parallel Tests: ${{ needs.parallel-tests.result }}" >> test-summary.md
        
        echo "## Artifacts" >> test-summary.md
        echo "Test reports and artifacts have been uploaded for review." >> test-summary.md
    
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md